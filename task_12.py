from collections import defaultdict

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

"""
Используется свойство функции делителей, согласно которому общее количество делителей равно произведению количества простых делителей числа увеличенного на 1: 28 = 2 * 14 = 2^2 * 7^1 => (2+1) * (1+1) = 6.
Алгоритм решето Эратосфена - для поиска простых чисел, формула для расчёта суммы последовательных натуральных чисел(n(n+1)/2) - для нахождения треугольного числа, и разложение на простые делители в цикле с накоплением степени в словаре с последующим использованием свойств функции делителей
"""


def sieve(n):
    end = n + 1
    sieve = [num for num in range(end)]
    sieve[0] = sieve[1] = False

    for i, num in enumerate(sieve):
        if num: 
            j = i**2 
            for k in range(j, end, i): 
                sieve[k] = False

    for num in sieve:
        if num:
            yield num


TARGET = 500
END = 2 * 10**36

for num in range(1, END):
    result = tri_num = num * (num + 1) / 2
    count = 1
    divisors = defaultdict(int)
    
    for div in sieve(TARGET):
        while not tri_num % div:
            divisors[div] += 1
            tri_num /= div
        if tri_num <= 1:
            break
            
    for val in divisors.values():
        count *= (val + 1)
        
    if count >= TARGET:
        print(int(result))
        break 
